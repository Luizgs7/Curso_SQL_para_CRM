 --###################################################
 -- PARTE 1 - QUERIES
 --###################################################
 
 -- SELECT
 SELECT * FROM SCHEMA_DB.SQL_CURSO_CADASTROS_TBL;   -- TODAS AS COLUNAS
  
 SELECT BOLETO, VL_VENDA_LIQ FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL;    -- ESCOLHENDO COLUNAS
  
 -- DISTINCT
 SELECT CPF FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE CPF = '12345678910';
 
 SELECT DISTINCT CPF, BOLETO FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE CPF = '12345678910';
 
 -- AS
 SELECT CPF AS CPF_NOVO FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL;


 -- WHERE E OPERADORES LOGICOS (= , !=, <>, >, <)
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA = '2020-08-24';
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA > '2020-08-24';
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA < '2020-08-24';
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA <= '2020-08-24';

 
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DES_CATEGORIA = 'ACESSORIOS';
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DES_CATEGORIA != 'ACESSORIOS';
  
 
 -- LIKE: _ , %
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DES_PRODUTO LIKE '%MASCARA%';       -- MASCARA EM QUALQUER LUGAR
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DES_PRODUTO LIKE '%MASCARA';        -- TERMINA COM 'MASCARA'
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DES_PRODUTO LIKE 'MASCARA%';        -- QUE COMECE COM MASCARA


 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DES_CATEGORIA LIKE '%ACESS_RIOS%';
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DES_CATEGORIA LIKE '%ACESSORIOS%';

 -- AND
 SELECT DISTINCT DES_CATEGORIA FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA = '2020-08-24' AND DES_CATEGORIA <> 'ACESSï¿½RIOS' ;

 
 -- BETWEEN
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA >= '2020-08-20' AND DT_VENDA <= '2020-08-22';
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA BETWEEN '2020-08-20' AND '2020-08-22';


 -- OR
 SELECT * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DES_CATEGORIA = 'ACESSORIOS' OR DT_VENDA = '2020-08-24';
 
 
 -- ORDER BY (DESC)
 SELECT DISTINCT VL_VENDA_LIQ FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA >= '2020-08-20' AND DT_VENDA <= '2020-08-29';
 SELECT DISTINCT VL_VENDA_LIQ FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA BETWEEN '2020-08-20' AND '2020-08-29' ORDER BY VL_VENDA_LIQ;
 SELECT DISTINCT VL_VENDA_LIQ FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA BETWEEN '2020-08-20' AND '2020-08-29' ORDER BY VL_VENDA_LIQ DESC;

 
-- LIMIT (OFFSET) E TOP
SELECT DISTINCT DT_VENDA FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA >= '2020-08-20' AND DT_VENDA <= '2020-08-29';
SELECT TOP 10  DT_VENDA FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA >= '2020-08-20' AND DT_VENDA <= '2020-08-29';
SELECT DT_VENDA FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA >= '2020-08-20' AND DT_VENDA <= '2020-08-29' LIMIT 15;
SELECT DT_VENDA FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL WHERE DT_VENDA >= '2020-08-20' AND DT_VENDA <= '2020-08-29' LIMIT 15 OFFSET 5;

 --###################################################
 -- PARTE 2 - TABELAS
 --###################################################
 
--REVISAO DA ULTIMA AULA
-- FAZER UMA CONSULTA PARA TRAZER TODAS AS SUBCATEGORIAS DA CATEGORIA MAQUIAGEM SEM DUPLICACOES E EM ORDEM ALFABETICA
_____ DES_SUBCATEGORIA ______ SCHEMA_DB.SQL_CURSO_VENDAS_TBL _____  DES_CATEGORIA = 'MAQUIAGEM' ______;












--REVISAO DA ULTIMA AULA
-- FAZER UMA CONSULTA PARA TRAZER TODAS AS COLUNAS DA TABELA DAS COMPRAS ENTRE OS DIAS 20/08/2020 AND 21/08/2020
_____ _ ______ SCHEMA_DB.SQL_CURSO_VENDAS_TBL _____  DT_VENDA _____ AND  ______;


-- CREATE TABLE: CONSTRAINTS E DATA TYPES (DECIMAL, INT, CHAR, VARCHAR, TEXT,DATE, TIMESTAMP, NULL, BOOLEAN)
  DROP TABLE SCHEMA_DB.TB_CADASTRO;
  CREATE TABLE SCHEMA_DB.TB_CADASTRO (
	  CPF INTEGER PRIMARY KEY,     -- COLUNA DE NUMERO INTEIRO E UNICA (NAO PERMITE REPETICAO)
	  NOME VARCHAR(255),           -- COLUNA DE TEXTO SEM TRAVA DE CHARACTERES
	  SOBRENOME CHAR(5),           -- COLUNA DE TEXTO COM TRAVA DE CHARACTERES
	  DT_NASCIMENTO DATE,          -- COLUNA DE DATE
	  CATEGORIA_FAVORITA VARCHAR(255)  -- COLUNA DE TEXTO SEM TRAVA DE CHARACTERES
  );
 
  
  DROP TABLE SCHEMA_DB.TB_VENDAS;
  CREATE TABLE SCHEMA_DB.TB_VENDAS (
	  CPF INTEGER PRIMARY KEY,         -- COLUNA DE NUMERO INTEIRO E UNICA (NAO PERMITE REPETICAO)
	  BOLETO BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,     -- COLUNA DE NUMERO INTEIRO E UNICA (NAO PERMITE REPETICAO) GERADA AUTOMATICAMENTE DE FORMA ORDENADA
	  SKU INTEGER,     -- COLUNA DE NUMERO INTEIRO
	  DES_CATEGORIA VARCHAR(255),      -- COLUNA DE TEXTO SEM TRAVA DE CHARACTERES
	  DT_VENDA TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    -- COLUNA DE DATA COM HORA, ONDE POR PADRAO JA INSERE A DATA DE HOJE
	  VL_VENDA DECIMAL(10,2)      -- COLUNA COM NUMERO DECIMAL
  );
   
  
 CREATE TABLE SCHEMA_DB.TB_PRODUTOS (   
      SKU INTEGER,              -- COLUNA DE NUMERO INTEIRO
      DES_PRODUTO VARCHAR(255),         -- COLUNA DE TEXTO SEM TRAVA DE CHARACTERES
      DES_CATEGORIA VARCHAR(255),       -- COLUNA DE TEXTO SEM TRAVA DE CHARACTERES
      DES_SUBCATEGORIA VARCHAR(255),    -- COLUNA DE TEXTO SEM TRAVA DE CHARACTERES
      UNIDADE VARCHAR(255)              -- COLUNA DE TEXTO SEM TRAVA DE CHARACTERES
 );

 -- INSERT
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (1,'LUIZ', 'SOUZA', '1996-04-12', NULL);
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (1,'CAROL', 'BEATO', '1995-11-10', 'PERFUMARIA');	-- ERRO DE VIOLACAO DA PRIMARY KEY
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (2,'CAROL', 'BEATO', '1995-11-10', 'PERFUMARIA');	-- PRIMARY KEY CORRIGIDA
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (3,'CAMILA', 'MANFIO', '1992-11-10', 'MAQUIAGEM'); -- ERRO TAMANHO DO CAMPO
 
 
 -- UPDATE
 UPDATE SCHEMA_DB.TB_VENDAS
 SET DES_CATEGORIA = ''
 WHERE DES_PRODUTO = '';
 
 -- ALTER TABLE
 ALTER TABLE SCHEMA_DB.TB_VENDAS ADD (PONTOS INTEGER);
 
 -- DELETE 
 DELETE FROM SCHEMA_DB.TB_CADASTRO WHERE CATEGORIA_FAVORITA LIKE 'PERFUMARIA';
 
 -- DROP 
 DROP TABLE SCHEMA_DB.TB_CADASTRO;
 
-- VIEW 
 CREATE VIEW SCHEMA_DB.TB_CADASTRO_VIEW AS (
 SELECT 
 * 
 FROM SCHEMA_DB.TB_CADASTRO 
 WHERE CATEGORIA_FAVORITA IS NULL
 );
 
 SELECT * FROM SCHEMA_DB.TB_CADASTRO_VIEW
 
  
 --###################################################
 -- PARTE 3 - FUNCOES DE AGREGACAO
 --####################################################
--REVISAO DA ULTIMA AULA
CREATE TABLE BASE_CPF (
    CPF INTEGER
 );
 
-- INSERIR 2 CPF'S NA TABELA CRIADA:

 INSERT INTO BASE_CPF VALUES ('123'); 
 INSERT INTO BASE_CPF VALUES ('893');
 
 
  -- VISUALIZAR TABELA CRIADA
 SELECT * FROM BASE_CPF;
 
 
 -- DELTAR OS DADOS DA TABELA:
 DELETE FROM BASE_CPF;
 
 -- EXCLUIR A TABELA DO BANCO DE DADOS:
 DROP TABLE BASE_CPF;
 
 -- CADASTRO
  DROP TABLE SCHEMA_DB.TB_CADASTRO;
  CREATE TABLE SCHEMA_DB.TB_CADASTRO (
      CPF INTEGER PRIMARY KEY,
      NOME VARCHAR(255),
      SOBRENOME VARCHAR(255),
      DT_NASCIMENTO DATE,
      CATEGORIA_FAVORITA VARCHAR(255)
  );
  
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (1,'LUIZ', 'SOUZA', '1983-04-12', NULL);
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (2,'CAROL', 'BEATO', '1995-11-10', 'PERFUMARIA');
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (3,'CAMILA', 'M', '1994-05-15', 'MAQUIAGEM');
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (4,'CAMILA', 'P', '1993-02-01', 'SKINCARE');
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (5,'LUCAS', 'PAVI', '1991-04-12', 'CABELOS');
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (6,'JULIAN', 'SANTOS', '1994-09-19', 'ACESSORIOS');
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (7,'KELY', 'PAULA', '1993-04-02', 'PERFUMARIA');
 INSERT INTO SCHEMA_DB.TB_CADASTRO VALUES (8,'MARIANA', 'SANTANA', '1990-04-02', NULL);
 
 SELECT * FROM SCHEMA_DB.TB_CADASTRO;
 
 -- COMPRAS
  DROP TABLE SCHEMA_DB.TB_VENDAS;
  CREATE TABLE SCHEMA_DB.TB_VENDAS (
      CPF INTEGER ,
      BOLETO BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      SKU INTEGER,
      DT_VENDA TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      VL_VENDA DECIMAL(10,2)
  );
 
  
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 2, 124,'2020-04-01', 120.30);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 3, 112,'2020-02-13', 68.25);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 4, 193,'2020-05-15', 78.80);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 5, 187,'2020-04-25', 95.82);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 6, 121,'2020-08-30', 99.99);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 7, 115,'2020-07-12', 101.40);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 2, 144,'2020-06-16', 77.20);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 6, 115,'2020-04-02', 68.80);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 7, 149,'2020-09-10', 81.10);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 2, 115,'2020-04-02', 58.80);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 10, 115,'2020-04-02', 58.80);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 7, 115,'2020-06-09', 79.90);
 INSERT INTO SCHEMA_DB.TB_VENDAS (CPF, SKU, DT_VENDA, VL_VENDA) VALUES ( 5, 115,'2020-09-02', 99.90);
 
 SELECT * FROM SCHEMA_DB.TB_VENDAS
 
 -- PRODUTOS
 DROP TABLE SCHEMA_DB.TB_PRODUTOS;
 CREATE TABLE SCHEMA_DB.TB_PRODUTOS (
      SKU INTEGER PRIMARY KEY,
      DES_PRODUTO VARCHAR(255),
      DES_CATEGORIA VARCHAR(255),
      DES_SUBCATEGORIA VARCHAR(255),
      UNIDADE VARCHAR(255)
 );
 
 INSERT INTO SCHEMA_DB.TB_PRODUTOS VALUES (124, 'BATOM LIQUIDO', 'MAQUIAGEM', 'MAQUIAGEM BOCA', 'CWB');
 INSERT INTO SCHEMA_DB.TB_PRODUTOS VALUES (112, 'MARCARA DE CICLO', 'MAQUIAGEM', 'MAQUIAGEM OLHOS', 'CWB');
 INSERT INTO SCHEMA_DB.TB_PRODUTOS VALUES (193, 'DESOBEDIENTE EDP', 'PERFUMARIA', 'EDP', 'CWB');
 INSERT INTO SCHEMA_DB.TB_PRODUTOS VALUES (187, 'BRILHO LABIAL', 'MAQUIAGEM', 'MAQUIAGEM BOCA', 'CWB');
 INSERT INTO SCHEMA_DB.TB_PRODUTOS VALUES (182, 'ESMALTE ROSILA', 'UNHAS', 'ESMALTE', 'CWB');
 INSERT INTO SCHEMA_DB.TB_PRODUTOS VALUES (135, 'SABONETE BARRA ', 'CORPO E BANHO', 'SABONETE', 'CWB');
 INSERT INTO SCHEMA_DB.TB_PRODUTOS VALUES (144, 'PALETA ADORO BRONZES', 'MAQUIAGEM', 'MAQUIAGEM OLHOS', 'CWB');
 INSERT INTO SCHEMA_DB.TB_PRODUTOS VALUES (146, 'BASE INSTAMATTE', 'MAQUIAGEM', 'MAQUIAGEM ROSTO', 'CWB');
 INSERT INTO SCHEMA_DB.TB_PRODUTOS VALUES (149, 'LAPIS DE OLHO', 'MAQUIAGEM', 'MAQUIAGEM OLHOS', 'CWB');
 INSERT INTO SCHEMA_DB.TB_PRODUTOS VALUES (125, 'SERUM VITAMINA C', 'CUIDADOS', 'SKINCARE', 'CWB');
 
 SELECT * FROM SCHEMA_DB.TB_CADASTRO;
 SELECT * FROM SCHEMA_DB.TB_VENDAS;
 SELECT * FROM SCHEMA_DB.TB_PRODUTOS;
 
 -- COUNT
 -- QTA DE CLIENTES QUE COMPRARAM
 SELECT 
 COUNT(*) AS QTD 
 FROM SCHEMA_DB.TB_VENDAS;

 -- #ESTA CORRETO? TEM DUPLICADOS!
 SELECT CPF FROM SCHEMA_DB.TB_VENDAS; -- TEM DUPLICACOES!
 
 SELECT
 COUNT(DISTINCT CPF) AS QTD 
 FROM SCHEMA_DB.TB_VENDAS; 
 
 -- QTA DE BOLETOS
 SELECT 
 COUNT(DISTINCT BOLETO) AS QTD 
 FROM SCHEMA_DB.TB_VENDAS;
 
 -- SUM
 -- RECEITA
 SELECT 
 SUM(VL_VENDA) AS RECEITA
 FROM SCHEMA_DB.TB_VENDAS; 
 
 -- AVG
 -- #QUE KPI EH ESSE?
 SELECT 
 AVG(VL_VENDA) AS PRECO_MEDIO_SKU
-- MEDIAN(VL_VENDA) AS VL_VENDA_MEDIANA
 FROM SCHEMA_DB.TB_VENDAS;
 
 -- ROUND
 SELECT 
 ROUND(VL_VENDA,2) AS VL_VENDA_ARREDONDA
 FROM SCHEMA_DB.TB_VENDAS;

 
 -- GRUPO BY
 SELECT 
     MONTH(DT_VENDA) AS MES,
     SUM(VL_VENDA) AS VL_VENDA
 FROM SCHEMA_DB.TB_VENDAS 
 WHERE VL_VENDA < 10
     GROUP BY MONTH(DT_VENDA)
     ORDER BY MONTH(DT_VENDA)
 LIMIT 3;
 

 -- HAVING
 SELECT 
     MONTH(DT_VENDA),
     SUM(VL_VENDA) AS VL_VENDA_TOTAL
 FROM SCHEMA_DB.TB_VENDAS 
     GROUP BY MONTH(DT_VENDA) 
     WHERE VL_VENDA_TOTAL > 100 ; -- ERRADO! 
 
 SELECT 
     MONTH(DT_VENDA),
     COUNT(DISTINCT CPF) AS QTD,
     SUM(VL_VENDA) AS VL_VENDA_TOTAL,
     SUM(VL_VENDA) / COUNT(DISTINCT CPF) AS COMPRAS_MEDIA
 FROM SCHEMA_DB.TB_VENDAS 
     GROUP BY MONTH(DT_VENDA)
     HAVING SUM(VL_VENDA) > 100
        AND SUM(VL_VENDA) / COUNT(DISTINCT CPF) >1 ;

 -- MAX
 SELECT 
 MAX(DT_VENDA) AS DT_VENDA 
 FROM SCHEMA_DB.TB_VENDAS;
 
 -- MIN
 SELECT 
 MIN(DT_VENDA) AS DT_VENDA 
 FROM SCHEMA_DB.TB_VENDAS;
 
  
 
 
 
 
 
 
-- RESPONDENDO A DUVIDAS:
 
 -- # CONSTRAIN DE 11 DIGITOS 
 DROP TABLE CPF_TESTE_CONSTRAINT;
 CREATE TABLE CPF_TESTE_CONSTRAINT (
    CPF BIGINT,
    CONSTRAINT CPF CHECK (CPF not like '%[^0-9]%' AND LENGTH(CPF)=11)
--    CONSTRAINT CPF CHECK(LENGTH(CPF)=11)
 );
 
 INSERT INTO CPF_TESTE_CONSTRAINT VALUES (12345678910); -- 11 DIGITOS
 INSERT INTO CPF_TESTE_CONSTRAINT VALUES (1234567891); -- 10 DIGITOS
 INSERT INTO CPF_TESTE_CONSTRAINT VALUES (123456789524); -- 12 DIGITOS 
 INSERT INTO CPF_TESTE_CONSTRAINT VALUES ('1234567891A'); -- CHARACTER
 INSERT INTO CPF_TESTE_CONSTRAINT VALUES ('A'); -- LETRA
 INSERT INTO CPF_TESTE_CONSTRAINT VALUES (A); -- LETRA SEM PARENTESES
 INSERT INTO CPF_TESTE_CONSTRAINT VALUES (12345678952); -- 11 DIGITOS

 SELECT * FROM CPF_TESTE_CONSTRAINT;
 
 
 -- # DATA COMO TEXTO (EX: JAN, FEV)
 -- https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.02/en-US/3f81ccc7e35d44cbbc595c7d552c202a.html
 SELECT month('2011-05-30') FROM dummy;
 
 SELECT MONTHNAME ('2011-05-30') "monthname" FROM DUMMY;
 
 SELECT SUBSTRING('JAN FEV MAR ABR MAI JUN JUL AGO SET OUT NOV DEZ ', (MONTH(CURRENT_DATE) * 4) - 3, 3) FROM DUMMY;
 
 
-- # VISUALIZACAO DO LOG DE EXECUCAO
-- https://felipelauffer.com/2019/03/18/select-ordem-logica-de-execucao/

 
 
 

 -- Somar receita por mes
SELECT MONTH(DT_VENDA), SUM(VL_VENDA_LIQ) FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL GROUP BY MONTH(DT_VENDA);

SELECT 
YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2) AS MES_ANO,
SUM(VL_VENDA_LIQ) 
FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL 
GROUP BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2)
ORDER BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2);

SELECT 
MONTH(DT_VENDA),
SUM(VL_VENDA_LIQ)
FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL 
WHERE YEAR(DT_VENDA) = 2020 
GROUP BY MONTH(DT_VENDA);

 
 -- Contar clientes distintos por mes
 SELECT 
 YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2) AS MES_ANO,
 COUNT(CPF) AS QTD_CLIENTS
 FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL 
 GROUP BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2)
 ORDER BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2);

 
 SELECT 
 YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2) AS MES_ANO,
 COUNT(DISTINCT CPF) AS QTD_CLIENTS
 FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL 
 GROUP BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2)
 ORDER BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2);
 
  
  --###################################################
 -- PARTE 3 - VAMOS PRATICAR!
 --  *** KPI'S DE CRM ***
 --###################################################
 
-- KPI's: Compradores por Mes
SELECT
    YEAR(DT_VENDA) || RIGHT('00'||MONTH(A.DT_VENDA),2) AS ANO_MES,
    COUNT(DISTINCT A.CPF) AS CLIENTES
FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL AS A
    WHERE DT_VENDA >= ADD_YEARS(CURRENT_DATE,-1 ) 
       AND DT_VENDA < CURRENT_DATE
       AND VL_VENDA_LIQ > 1 
       AND A.CPF IS NOT NULL
GROUP BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2)
ORDER BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2);


 -- KPI's: + Receita Total
SELECT 
    YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2) AS ANO_MES,
    COUNT (DISTINCT A.CPF) AS CLIENTES,
    SUM(VL_VENDA_LIQ) AS RECEITA
FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL AS A
    WHERE DT_VENDA >= ADD_YEARS(CURRENT_DATE,-1 ) 
       AND DT_VENDA < CURRENT_DATE
       AND VL_VENDA_LIQ > 1 
       AND A.CPF IS NOT NULL       
GROUP BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2)
ORDER BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2);


 -- KPI's: + Gasto Medio
SELECT 
    YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2) AS ANO_MES,
    COUNT (DISTINCT A.CPF) AS CLIENTES,
    SUM(VL_VENDA_LIQ) AS RECEITA,
    SUM(VL_VENDA_LIQ)/ COUNT(DISTINCT A.CPF) AS GASTO_MEDIO
FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL AS A
    WHERE DT_VENDA >= ADD_YEARS(CURRENT_DATE,-1 ) 
       AND DT_VENDA < CURRENT_DATE
       AND VL_VENDA_LIQ > 1 
       AND A.CPF IS NOT NULL       
GROUP BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2)
ORDER BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2);


 -- KPI's: + Frequencia
SELECT 
    YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2) AS ANO_MES,
    COUNT (DISTINCT A.CPF) AS CLIENTES,
    SUM(VL_VENDA_LIQ) AS RECEITA,
    SUM(VL_VENDA_LIQ)/COUNT (DISTINCT A.CPF) AS GASTO_MEDIO,
    COUNT(DISTINCT BOLETO) AS QTD_BOLETOS,
    COUNT(DISTINCT BOLETO)/COUNT(DISTINCT A.CPF) AS FREQUENCIA
FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL AS A
    WHERE DT_VENDA >= ADD_YEARS(CURRENT_DATE,-1 ) 
       AND DT_VENDA < CURRENT_DATE
       AND VL_VENDA_LIQ > 1 
       AND A.CPF IS NOT NULL
GROUP BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2)
ORDER BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2);



 -- KPI's: + Boleto Medio
SELECT 
    YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2) AS ANO_MES,
    COUNT (DISTINCT A.CPF) AS CLIENTES,
    SUM(VL_VENDA_LIQ) AS RECEITA,
    SUM(VL_VENDA_LIQ)/COUNT (DISTINCT A.CPF) AS GASTO_MEDIO,
    COUNT(DISTINCT BOLETO) AS QTD_BOLETOS,
    COUNT(DISTINCT BOLETO)/COUNT (DISTINCT A.CPF) AS FREQUENCIA,
    SUM(VL_VENDA_LIQ)/COUNT(DISTINCT BOLETO) AS BOLETO_MEDIO
FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL AS A
    WHERE DT_VENDA >= ADD_YEARS(CURRENT_DATE,-1 ) 
       AND DT_VENDA < CURRENT_DATE
       AND VL_VENDA_LIQ > 1 
       AND A.CPF IS NOT NULL   
GROUP BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2)
ORDER BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2);

 -- KPI's: + Produtividade
SELECT 
    YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2) AS ANO_MES,
    COUNT (DISTINCT A.CPF) AS CLIENTES,
    SUM(VL_VENDA_LIQ) AS RECEITA,
    SUM(VL_VENDA_LIQ)/COUNT (DISTINCT A.CPF) AS GASTO_MEDIO,
    COUNT(DISTINCT BOLETO) AS QTD_BOLETOS,
    COUNT(DISTINCT BOLETO)/COUNT (DISTINCT A.CPF) AS FREQUENCIA,
    SUM(VL_VENDA_LIQ)/COUNT(DISTINCT BOLETO) AS BOLETO_MEDIO,
    SUM(QT_VENDA)/COUNT(DISTINCT BOLETO) AS PRODUTIVIDADE
FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL AS A
    WHERE DT_VENDA >= ADD_YEARS(CURRENT_DATE,-1 ) 
       AND DT_VENDA < CURRENT_DATE
       AND VL_VENDA_LIQ > 1 
       AND A.CPF IS NOT NULL   
GROUP BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2)
ORDER BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2);



 -- KPI's: + Preco Medio
 -- DADOS DO ULTIMO ANO MOVEL
SELECT 
    YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2) AS ANO_MES,
    COUNT (DISTINCT A.CPF) AS CLIENTES,
    SUM(VL_VENDA_LIQ) AS RECEITA,
    SUM(VL_VENDA_LIQ)/COUNT (DISTINCT A.CPF) AS GASTO_MEDIO,
    COUNT(DISTINCT BOLETO) AS QTD_BOLETOS,
    COUNT(DISTINCT BOLETO)/COUNT (DISTINCT A.CPF) AS FREQUENCIA,
    SUM(VL_VENDA_LIQ)/COUNT(DISTINCT BOLETO) AS BOLETO_MEDIO,
    SUM(QT_VENDA)/COUNT(DISTINCT BOLETO) AS PRODUTIVIDADE,
    SUM(VL_VENDA_LIQ)/SUM(QT_VENDA) AS PRECO_MEDIO
FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL AS A
    WHERE DT_VENDA >= ADD_YEARS(CURRENT_DATE,-1 ) AND DT_VENDA < CURRENT_DATE AND VL_VENDA_LIQ > 1 
       AND A.CPF IS NOT NULL   
GROUP BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2)
ORDER BY YEAR(DT_VENDA) || RIGHT('00'||MONTH(DT_VENDA),2);
 






  --###################################################
 -- PARTE 4 - CRUZAMENTO DE TABELAS
 --####################################################
 
 SELECT * FROM SCHEMA_DB.TB_CADASTRO;
 SELECT * FROM SCHEMA_DB.TB_VENDAS;
 SELECT * FROM SCHEMA_DB.TB_PRODUTOS;
 
 

-- LEFT JOIN
 SELECT 
     T1.CPF,
     T1.NOME,
     T2.DT_VENDA,
     T2.VL_VENDA
 FROM SCHEMA_DB.TB_CADASTRO AS T1 -- (A)
    LEFT JOIN SCHEMA_DB.TB_VENDAS AS T2 -- (B)
    ON T1.CPF = T2.CPF;
    

-- LEFT JOIN EXCLUDING
 SELECT 
     T1.CPF,
     T1.NOME,
     T2.DT_VENDA,
     T2.VL_VENDA
 FROM SCHEMA_DB.TB_CADASTRO AS T1 -- (A)
    LEFT JOIN SCHEMA_DB.TB_VENDAS AS T2 -- (B)
    ON T1.CPF = T2.CPF
 WHERE T2.CPF IS NULL;

 
 -- RIGHT JOIN
 SELECT 
     T2.CPF,
     T1.CPF,
     T1.NOME,
     T2.DT_VENDA,
     T2.VL_VENDA
 FROM SCHEMA_DB.TB_CADASTRO AS T1 -- (A)
    RIGHT JOIN SCHEMA_DB.TB_VENDAS AS T2 -- (B)
    ON T1.CPF = T2.CPF;
 

-- RIGHT JOIN EXCLUDING
 SELECT 
     T2.CPF,
     T1.CPF,
     T1.NOME,
     T2.DT_VENDA,
     T2.VL_VENDA
 FROM SCHEMA_DB.TB_CADASTRO AS T1 -- (A)
    RIGHT JOIN SCHEMA_DB.TB_VENDAS AS T2 -- (B)
    ON T1.CPF = T2.CPF
 WHERE T1.CPF IS NULL;
 
 
  -- INNER JOIN
 SELECT 
     T2.CPF,
     T1.CPF,
     T1.NOME,
     T2.DT_VENDA,
     T2.VL_VENDA
 FROM SCHEMA_DB.TB_CADASTRO AS T1 -- (A)
    INNER JOIN SCHEMA_DB.TB_VENDAS AS T2 -- (B)
    ON T1.CPF = T2.CPF;
 

   -- FULL OUTER JOIN
 SELECT 
     T2.CPF,
     T1.CPF,
     T1.NOME,
     T2.DT_VENDA,
     T2.VL_VENDA
 FROM SCHEMA_DB.TB_CADASTRO AS T1 -- (A)
    FULL OUTER JOIN SCHEMA_DB.TB_VENDAS AS T2 -- (B)
    ON T1.CPF = T2.CPF;
 

  -- FULL OUTER JOIN EXCLUDING
 SELECT 
     T1.CPF,
     T1.NOME,
     T2.DT_VENDA,
     T2.VL_VENDA
 FROM SCHEMA_DB.TB_CADASTRO AS T1 -- (A)
    FULL OUTER JOIN SCHEMA_DB.TB_VENDAS AS T2 -- (B)
    ON T1.CPF = T2.CPF
 WHERE T1.CPF IS NULL OR T2.CPF IS NULL;
 
 
 -- UNION
 
 SELECT CPF FROM SCHEMA_DB.TB_CADASTRO
     UNION      -- SEM DUPLICACAO
 SELECT CPF FROM SCHEMA_DB.TB_VENDAS;
 

 
 
 SELECT CPF FROM SCHEMA_DB.TB_CADASTRO
     UNION ALL  -- COM DUPLICACAO
 SELECT CPF FROM SCHEMA_DB.TB_VENDAS;
 
 
 -- SUBQUERIES
 SELECT 
     T1.*
 FROM SCHEMA_DB.TB_CADASTRO AS T1
 WHERE T1.CPF IN (SELECT 
                    CPF
                  FROM SCHEMA_DB.TB_VENDAS 
                  WHERE SKU = 124
                  );
   
          
--               
WITH COMPRADORES_SKU_124 AS (   -- TABELA VIRTURAL 01
    SELECT 
        CPF,
        SKU
    FROM SCHEMA_DB.TB_VENDAS 
    WHERE SKU = '124'),
    CATEGORIA_SKU_124 AS (      -- TABELA VIRTURAL 02
    SELECT 
        SKU,
        DES_CATEGORIA,
        DES_SUBCATEGORIA
    FROM SCHEMA_DB.TB_PRODUTOS)
    SELECT
    T1.CPF,
    T1.NOME,
    T3.DES_CATEGORIA,
    T3.DES_SUBCATEGORIA
    FROM SCHEMA_DB.TB_CADASTRO AS T1
    INNER JOIN COMPRADORES_SKU_124 AS T2
    ON T1.CPF = T2.CPF
    LEFT JOIN CATEGORIA_SKU_124 AS T3
    ON T2.SKU = T3.SKU;


 SELECT * FROM SCHEMA_DB.TB_CADASTRO;
 SELECT * FROM SCHEMA_DB.TB_VENDAS;
 SELECT * FROM SCHEMA_DB.TB_PRODUTOS;

 
 
 
-- TRAZER CPF, NOME E VOLUME DE BOLETOS DOS COMPRADORES DE 'SERUM VITAMINA C'

SELECT 
CAD.CPF,
CAD.NOME,
COMP._____
FROM SCHEMA_DB.TB_CADASTRO AS CAD
_____ (SELECT 
            CPF,
            _____ AS QTD_BOLETOS 
            FROM SCHEMA_DB.TB_VENDAS AS COMP
            _____ SCHEMA_DB.TB_PRODUTOS AS SKU
            ON COMP.____ = SKU.____
            WHERE DES_PRODUTO = 'SERUM VITAMINA C'
            _____) AS COMP
ON CAD._____ = COMP._____;




     
  --###################################################
 -- PARTE 5 - FUNCOES DE JANELA
 --####################################################

 DROP TABLE COD_DDD_EXEMPLO_CURSO;
 CREATE TABLE COD_DDD_EXEMPLO_CURSO AS (
 SELECT 
 CPF,
 CAST(COD_DDD AS INT) AS COD_DDD
 FROM SCHEMA_DB.SQL_CURSO_CADASTROS_TBL
 WHERE COD_DDD IS NOT NULL
 LIMIT 500);
 
 
 
-- ROW_NUMBER
-- FAZ UM RANKEAMENTO SIMPLES E NAO TEM EMPATE
SELECT 
    CPF, 
    ROW_NUMBER() OVER(ORDER by CPF DESC) AS ROWNUM_CPF_DESC,
    ROW_NUMBER() OVER(ORDER by CPF ASC) AS ROWNUM_CPF_ASC
FROM COD_DDD_EXEMPLO_CURSO;
 
-- ROW_NUMBER com PARTITION BY
-- FAZ UM RANKEAMENTO COM UM CRITERIO E NAO TEM EMPATE
SELECT 
    CPF,
    COD_DDD,
    ROW_NUMBER() OVER(PARTITION BY COD_DDD ORDER by CPF DESC) AS ROWNUM_CPF 
FROM COD_DDD_EXEMPLO_CURSO;

--RANK
--PULA O RANKEAMENTO QUANDO TEM EMPATE!
SELECT 
    CPF,
    COD_DDD,
    RANK() OVER(ORDER by COD_DDD DESC) AS ROWNUM_CPF 
FROM COD_DDD_EXEMPLO_CURSO;

-- DENSE_RANK
-- QUANDO EMPATA CONTINUA NO PROXIMO DO RANKING
SELECT 
    CPF,
    COD_DDD,
    DENSE_RANK () OVER(ORDER by COD_DDD DESC) AS ROWNUM_CPF
FROM COD_DDD_EXEMPLO_CURSO;

-- NTILE
SELECT
    NTILE,
--    COD_DDD,
    COUNT(*) AS QTD
FROM (
    SELECT 
        CPF,
        COD_DDD,
        NTILE(3) OVER (PARTITION BY COD_DDD ORDER BY CPF) AS NTILE 
    FROM COD_DDD_EXEMPLO_CURSO
) AS T0
GROUP BY NTILE--,COD_DDD;



 --###################################################
 -- PARTE 6 - OUTRAS FUNCOES
 --####################################################
 
-- CURRENT_DATE
SELECT 
NOME,
CURRENT_DATE AS DATA_DE_HOJE,   -- DATA DE HOJE
DAY(CURRENT_DATE) AS DIA_DE_HOJE,   -- EXTRAIR DIA
MONTH(CURRENT_DATE) AS MES_DE_HOJE, -- EXTRAIR MES
YEAR(CURRENT_DATE) AS ANO_DE_HOJE,  -- EXTRAIR ANO
CURRENT_TIMESTAMP AS DATA_E_HORA_DE_HOJE,   -- DATA DE HOJE COM HORAS, MINUTOS E SEGUNDOS
FROM SCHEMA_DB.TB_CADASTRO


-- DAYS_BETWEEN, ADD_DAYS
SELECT
NOME,
DAYS_BETWEEN(DT_NASCIMENTO, CURRENT_DATE ) AS IDADE,    -- QTD DE DIAS ENTRE DUAS DATAS
ADD_DAYS(CURRENT_DATE,1)  AS AMANHA,
ADD_DAYS(CURRENT_DATE,-1)  AS ONTEM
FROM SCHEMA_DB.TB_CADASTRO


-- GERACOES
SELECT
CPF,
CASE 
    WHEN YEAR (DAT_NASCIMENTO) BETWEEN 1940 AND 1960 THEN 'Geracao Baby Boomers'
    WHEN YEAR (DAT_NASCIMENTO) BETWEEN 1961 AND 1980 THEN 'Geracao X'
    WHEN YEAR (DAT_NASCIMENTO) BETWEEN 1981 AND 1995 THEN 'Geracao Y - Millennials'
    WHEN YEAR (DAT_NASCIMENTO) BETWEEN 1996 AND 2010 THEN 'Geracao Z'
ELSE 'OUTRAS GERACOES' END AS GERACOES
FROM SCHEMA_DB.SQL_CURSO_CADASTROS_TBL

-- FAZER COM WITH

-- CASE WHEN
SELECT 
CPF,
DAT_NASCIMENTO,
CASE 
    WHEN year(current_date) - YEAR(DAT_NASCIMENTO) <= 15 THEN 'A_SEM_INFO' 
    WHEN year(current_date) - YEAR(DAT_NASCIMENTO) <= 20 THEN 'B_ATE_20'
    WHEN year(current_date) - YEAR(DAT_NASCIMENTO) <= 25 THEN 'C_21_A_25'   
    WHEN year(current_date) - YEAR(DAT_NASCIMENTO) <= 30 THEN 'D_26_A_30'   
    WHEN year(current_date) - YEAR(DAT_NASCIMENTO) <= 35 THEN 'E_31_A_35'  
    WHEN year(current_date) - YEAR(DAT_NASCIMENTO) <= 40 THEN 'F_36_A_40'   
    WHEN year(current_date) - YEAR(DAT_NASCIMENTO) <= 45 THEN 'G_41_A_45'    
    WHEN year(current_date) - YEAR(DAT_NASCIMENTO) <= 60 THEN 'H_46_A_60'
    WHEN year(current_date) - YEAR(DAT_NASCIMENTO) <= 90 THEN 'I_ACIMA_60' 
ELSE 'A_SEM_INFO' END AS FAIXA_DE_IDADE_1,
CASE 
    WHEN ROUND(DAYS_BETWEEN(DAT_NASCIMENTO,CURRENT_DATE) /365, 0, ROUND_DOWN) <= 15 THEN 'A_SEM_INFO' 
    WHEN ROUND(DAYS_BETWEEN(DAT_NASCIMENTO,CURRENT_DATE) /365, 0, ROUND_DOWN) <= 20 THEN 'B_ATE_20'
    WHEN ROUND(DAYS_BETWEEN(DAT_NASCIMENTO,CURRENT_DATE) /365, 0, ROUND_DOWN) <= 25 THEN 'C_21_A_25'   
    WHEN ROUND(DAYS_BETWEEN(DAT_NASCIMENTO,CURRENT_DATE) /365, 0, ROUND_DOWN) <= 30 THEN 'D_26_A_30'   
    WHEN ROUND(DAYS_BETWEEN(DAT_NASCIMENTO,CURRENT_DATE) /365, 0, ROUND_DOWN) <= 35 THEN 'E_31_A_35'  
    WHEN ROUND(DAYS_BETWEEN(DAT_NASCIMENTO,CURRENT_DATE) /365, 0, ROUND_DOWN) <= 40 THEN 'F_36_A_40'   
    WHEN ROUND(DAYS_BETWEEN(DAT_NASCIMENTO,CURRENT_DATE) /365, 0, ROUND_DOWN) <= 45 THEN 'G_41_A_45'    
    WHEN ROUND(DAYS_BETWEEN(DAT_NASCIMENTO,CURRENT_DATE) /365, 0, ROUND_DOWN) <= 60 THEN 'H_46_A_60'
    WHEN ROUND(DAYS_BETWEEN(DAT_NASCIMENTO,CURRENT_DATE) /365, 0, ROUND_DOWN) <= 90 THEN 'I_ACIMA_60'     
ELSE 'A_SEM_INFO' END AS FAIXA_DE_IDADE_2
FROM SCHEMA_DB.SQL_CURSO_CADASTROS_TBL
WHERE DAT_NASCIMENTO IS NOT NULL;


-- CONCATENAR
SELECT
NOME,
SOBRENOME,
NOME || SOBRENOME AS NOME_COMPLETO,
NOME || ' ' || SOBRENOME AS NOME_COMPLETO_COM_ESPACO
FROM SCHEMA_DB.SQL_CURSO_CADASTROS_TBL;

-- REPLACE
SELECT
NOME,
REPLACE(NOME, 'Z', 'S') AS NOVO_NOME_1,
REPLACE(NOME, 'A', '@') AS NOVO_NOME_2
FROM SCHEMA_DB.TB_CADASTRO

-- RAND
SELECT
CPF,
NOME,
RAND() AS NUMERO_ALETORIO_01
FROM SCHEMA_DB.TB_CADASTRO


-- LOWER, LOWER AND INITCAP
SELECT
INITCAP(NOME) AS NOME_PRIMEIRA_LETRA_MAIUSCULA,
LOWER(NOME) AS NOME_MINUSCULO,
UPPER(NOME) AS NOME_MAIUSCULO
FROM SCHEMA_DB.TB_CADASTRO

-- SUBSTRING (COLUNA, INICIO, CASAS)
SELECT
NOME,
SUBSTRING(NOME, 1, 2) AS NOME_CORTADO_1,    -- RECORTA DO PRIMEIRO CHARACTER E ANDA ATE 2 CASAS
SUBSTRING(NOME, 3, 4) AS NOME_CORTADO_2     -- RECORTA DO TERCEIRO CHARACTER E ANDA ATE 4 CASAS
FROM SCHEMA_DB.TB_CADASTRO















-- EXERCICIO

-- ENCONTRAR O TOTAL DE RECEITA POR FAIXA DE IDADE NOS ULTIMOS 12 MESES
0 A 20
21 A 30
31 A 40
41 A 50
51 A 60
ACIMA DE 60
SEM INFORMACAO

-- BASES
SELECT * FROM SCHEMA_DB.SQL_CURSO_CADASTROS_TBL;
SELECT TOP 10 * FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL;

SELECT
T1.CPF,
CASE 
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 0 AND 20 THEN '0 A 20'
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 21 AND 30 THEN '21 A 30'
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 31 AND 40 THEN '31 A 40'
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 41 AND 50 THEN '41 A 50'
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 41 AND 50 THEN '51 A 60'
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) >60 THEN 'Acima de 60'
ELSE 'SEM INFORMACAO' END AS IDADE,
SUM(VL_VENDA_LIQ) AS RECEITA
FROM SCHEMA_DB.SQL_CURSO_CADASTROS_TBL AS T1
INNER JOIN SCHEMA_DB.SQL_CURSO_VENDAS_TBL AS T2
ON T1.CPF = T2.CPF
AND T2.DT_VENDA BETWEEN '2019-11-11' AND '2020-11-11'
GROUP BY IDADE, RECEITA


CREATE TABLE FAIXA_IDADE_POR_CPF AS (
SELECT 
T1.CPF,
CASE 
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 0 AND 20 THEN '0 A 20'
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 21 AND 30 THEN '21 A 30'
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 31 AND 40 THEN '31 A 40'
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 41 AND 50 THEN '41 A 50'
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 41 AND 50 THEN '51 A 60'
WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) >60 THEN 'Acima de 60'
ELSE 'SEM INFORMACAO' END AS IDADE
FROM SCHEMA_DB.SQL_CURSO_CADASTROS_TBL AS T1
);


CREATE TABLE VENDAS_12_MESES AS (
SELECT
CPF,
SUM(VL_VENDA_LIQ) AS RECEITA
FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL
WHERE DT_VENDA >= ADD_YEARS(CURRENT_DATE,-1) 
GROUP BY CPF
);


SELECT
T1.IDADE,
SUM(T2.RECEITA) AS RECEITA_POR_IDADE
FROM (  SELECT 
        T1.CPF,
        CASE 
        WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 0 AND 20 THEN '0 A 20'
        WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 21 AND 30 THEN '21 A 30'
        WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 31 AND 40 THEN '31 A 40'
        WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 41 AND 50 THEN '41 A 50'
        WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) BETWEEN 41 AND 50 THEN '51 A 60'
        WHEN YEAR(current_date) - YEAR(DAT_NASCIMENTO) >60 THEN 'Acima de 60'
        ELSE 'SEM INFORMACAO' END AS IDADE
        FROM SCHEMA_DB.SQL_CURSO_CADASTROS_TBL AS T1) AS T1
INNER JOIN (SELECT
            CPF,
            SUM(VL_VENDA_LIQ) AS RECEITA
            FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL
            WHERE DT_VENDA >= ADD_YEARS(CURRENT_DATE,-1) 
            GROUP BY CPF) AS T2
ON T1.CPF = T2.CPF
GROUP BY T1.IDADE;



 --###################################################
 -- PARTE 7 - BOAS PRATICAS
 --###################################################
 
-- COMENTARIOS:
--      *Importante para que outras pessoas entendam o seu codigo quando necessario;
--      *Para que voce mesmo entenda, principalmente quando fica dia, meses ou as vezes anos sem contato com o codigo. 
--      *Facilita na analise da logica do codigo. Pode te dar novas ideias sobre como resolver o problema de maneira mais simples

-- IDENTACAO ( https://poorsql.com/ )
--      *Ajua na leitura do codigo. Isso eh extremamente importante quando existem bug (erros de digitacao ou de logica) que impossibilitam a compilacao do comando.
--      *Os comandos ficam separados de maneira logica 

-- USAR ALIAS LOGICOS
--      *Organizar de tabelas e colunas


 --###################################################
 -- PARTE 8 - VAMOS PRATICAR!
 --  *** SEGMENTO FREQUENCIA E VALOR ***
 --###################################################
-- FREQUENCIA E BOLETO MEDIANO
DROP TABLE SCHEMA_DB.SEGMENTACAO_FV_INICIO;
CREATE TABLE SCHEMA_DB.SEGMENTACAO_FV_INICIO AS (
    SELECT
         CPF,
         MEDIAN(VALOR_BOLETO) AS BOLETO_MEDIANO,
         AVG(VALOR_BOLETO) AS BOLETO_MEDIO,
         SUM(VALOR_BOLETO) AS GASTO_MEDIO,
         COUNT(DISTINCT BOLETO) AS FREQUENCIA 
        FROM ( SELECT
                    CPF,
                    CD_LOJA||NR_PDV||NR_CUPOM||DT_VENDA AS BOLETO,
                    SUM (VL_VENDA_LIQ) AS VALOR_BOLETO 
               FROM SCHEMA_DB.SQL_CURSO_VENDAS_TBL AS T1
               WHERE T1.DT_VENDA >= ADD_YEARS(CURRENT_DATE,-1) AND T1.DT_VENDA <= ADD_DAYS(CURRENT_DATE,-1)  --1 ANO
                 AND T1.VL_VENDA_LIQ > 1
                 AND T1.CPF IS NOT NULL
            GROUP BY CPF, CD_LOJA||NR_PDV||NR_CUPOM||DT_VENDA 
         ) AS T0
GROUP BY CPF 
);



-- LOGICA DA SEGMENTACAO
DROP TABLE SCHEMA_DB.SEGMENTACAO_FV;
CREATE TABLE SCHEMA_DB.SEGMENTACAO_FV AS (
    SELECT
        CPF,
        CASE
            WHEN FREQUENCIA = 1 AND BOLETO_MEDIANO < 80 THEN 'BRONZE_BAIXO'
            WHEN FREQUENCIA = 1 AND BOLETO_MEDIANO >= 80 THEN 'BRONZE_ALTO'
            WHEN FREQUENCIA > 1 AND FREQUENCIA <=3 AND BOLETO_MEDIANO < 80 THEN 'PRATA'
            WHEN FREQUENCIA > 1 AND FREQUENCIA <=3 AND BOLETO_MEDIANO >= 80 THEN 'OURO_ALTO'
            WHEN FREQUENCIA > 3 AND BOLETO_MEDIANO < 80 THEN 'OURO_BAIXO'
            WHEN FREQUENCIA > 3 AND FREQUENCIA <=4 AND BOLETO_MEDIANO >= 100 THEN 'DIAMANTE'
            WHEN FREQUENCIA > 3 AND BOLETO_MEDIANO >= 80 AND BOLETO_MEDIANO < 100 THEN 'DIAMANTE'
            WHEN FREQUENCIA > 4 AND BOLETO_MEDIANO >= 100 THEN 'SUPER_DIAMANTE'
       ELSE 'NADA' END AS SEGMENTO,
       GASTO_MEDIO,
       FREQUENCIA 
    FROM SEGMENTACAO_FV_INICIO 
);


SELECT
    SEGMENTO,
    COUNT (CPF) AS QTD
FROM SCHEMA_DB.SEGMENTACAO_FV
GROUP BY SEGMENTO;


--###################################################
 -- PARTE 8 - VAMOS PRATICAR!
 --  *** MODELO CICLO DE VIDA ***
 --###################################################
-- EXEMPLO: '42055474049' 

-- BASE TRANSACIONAL FULL 
DROP TABLE SCHEMA_DB.BASE_TRANSACIONAL;
CREATE TABLE SCHEMA_DB.BASE_TRANSACIONAL AS (
    SELECT
        CPF,
        DT_VENDA,
        BOLETO,
        SUM (VL_VENDA_LIQ) AS VL_VENDA_LIQ 
    FROM TB_VENDAS AS T1
    GROUP BY CPF, DT_VENDA, BOLETO
);


-- PENULTIMA COMPRA
DROP TABLE SCHEMA_DB.DATA_PENULTIMA_COMPRA;
CREATE TABLE SCHEMA_DB.DATA_PENULTIMA_COMPRA AS (
    SELECT
         CPF,
         DT_VENDA AS DATA_PENULTIMA_COMPRA 
    FROM (  SELECT
                CPF,
                DT_VENDA,
                ROW_NUMBER() OVER (PARTITION BY CPF ORDER BY DT_VENDA DESC) AS CODIGO_ROW -- RANKING DA MAIOR DATA PARA A MENOR
            FROM ( 
                    SELECT DISTINCT 
                        CPF,
                        DT_VENDA 
                    FROM SCHEMA_DB.BASE_TRANSACIONAL
                        WHERE VL_VENDA_LIQ > 1 
                 ) AS T0
          ) AS T1
    WHERE CODIGO_ROW = 2
);

-- JUNTANDO PRIMEIRA COMRA, ULTIMA COMPRA E PENULTIMA COMPRA
DROP TABLE SCHEMA_DB.JUNTA_PRIM_ULT_PENUL_COMPRA;
CREATE TABLE SCHEMA_DB.JUNTA_PRIM_ULT_PENUL_COMPRA AS (
    SELECT
       T1.CPF,
       MAX(DT_VENDA) AS DATA_ULTIMA_COMPRA,
       MIN(DT_VENDA) AS DATA_PRIMEIRA_COMPRA,
       DATA_PENULTIMA_COMPRA
    FROM SCHEMA_DB.BASE_TRANSACIONAL AS T1 
    
        LEFT JOIN SCHEMA_DB.DATA_PENULTIMA_COMPRA AS T2 
        ON T1.CPF = T2.CPF
        
    GROUP BY T1.CPF, T2.DATA_PENULTIMA_COMPRA
);


DROP TABLE SCHEMA_DB.CICLO_VIDA;
CREATE TABLE SCHEMA_DB.CICLO_VIDA AS (
    SELECT
       CPF,
       CASE 
          WHEN DAYS_BETWEEN (DATA_PRIMEIRA_COMPRA, ADD_DAYS(CURRENT_DATE , -1)) <= 90 THEN 'BERCARIO' 
          WHEN DAYS_BETWEEN (DATA_ULTIMA_COMPRA,   ADD_DAYS(CURRENT_DATE, -1)) <= 90  AND DATA_PENULTIMA_COMPRA < ADD_YEARS(CURRENT_DATE, -1)     THEN 'REATIVADO' 
          WHEN DAYS_BETWEEN (DATA_ULTIMA_COMPRA,   ADD_DAYS(CURRENT_DATE, -1)) <= 90  AND DATA_PENULTIMA_COMPRA >= ADD_YEARS(CURRENT_DATE, -1)    THEN 'RECOMPRADOR' 
          WHEN DAYS_BETWEEN (DATA_ULTIMA_COMPRA,   ADD_DAYS(CURRENT_DATE, -1)) >  90  AND DAYS_BETWEEN (DATA_ULTIMA_COMPRA, ADD_DAYS(CURRENT_DATE, -1)) <= 300    THEN 'ATIVO' 
          WHEN DAYS_BETWEEN (DATA_ULTIMA_COMPRA,   ADD_DAYS(CURRENT_DATE, -1)) > 300  AND DAYS_BETWEEN (DATA_ULTIMA_COMPRA, ADD_DAYS(CURRENT_DATE, -1)) <= 365     THEN 'RETENCAO' 
          WHEN DAYS_BETWEEN (DATA_ULTIMA_COMPRA,   ADD_DAYS(CURRENT_DATE, -1)) > 365 AND DAYS_BETWEEN (DATA_ULTIMA_COMPRA, ADD_DAYS(CURRENT_DATE, -1)) <= 548    THEN 'INATIVO_I1'
          WHEN DAYS_BETWEEN (DATA_ULTIMA_COMPRA,   ADD_DAYS(CURRENT_DATE, -1)) > 548  AND DAYS_BETWEEN (DATA_ULTIMA_COMPRA, ADD_DAYS(CURRENT_DATE, -1)) <= 730    THEN 'INATIVO_I2' 
       ELSE 'INATIVO_I3' END AS CICLO_DE_VIDA
    FROM SCHEMA_DB.JUNTA_PRIM_ULT_PENUL_COMPRA
);


SELECT
    CICLO_DE_VIDA,
    COUNT (CPF) AS QTD
FROM SCHEMA_DB.CICLO_VIDA
GROUP BY CICLO_DE_VIDA;

